#!/usr/bin/env ruby

require 'dotenv'
require 'fileutils'
require 'heroku/api/postgres'
require 'logger'
require 'open-uri'
require 'parallel'


# Load configuration
Dotenv.load # defaults to '.env'
# TODO: Enable require_keys check when next version of gem is released
#Dotenv.require_keys('HEROKU_AUTH_TOKEN')
THREADS = ENV.fetch('THREADS', 4).to_i
HEROKU_AUTH_TOKEN = ENV.fetch('HEROKU_AUTH_TOKEN')
DESTINATION = File.expand_path(ENV.fetch('DESTINATION', '/media/destination'))
EXCLUDE_APPS = ENV.fetch('EXCLUDE_APPS', '').split(',').map(&:strip)


# Configure the app wide logger
$logger = Logger.new(STDOUT)
$logger.formatter = proc do |severity, datetime, progname, message|
  if Thread.current.thread_variable_get(:logger_label)
    message = "#{Thread.current.thread_variable_get(:logger_label)} - #{message}"
  end
  "#{datetime} #{severity} #{progname}: #{message}\n"
end
$logger.level = ENV['LOG_LEVEL']&.to_i || Logger::INFO


$logger.info 'Loaded configuration'
$logger.debug "Heroku auth token: #{ENV['HEROKU_AUTH_TOKEN'] ? 'present' : 'absent!'}"
$logger.debug "Using #{THREADS} threads."
$logger.debug "Saving to: #{DESTINATION}"
$logger.debug "Excluding #{EXCLUDE_APPS.count} apps: #{EXCLUDE_APPS.join(', ')}"


# Setup clients
heroku_client = PlatformAPI.connect_oauth(HEROKU_AUTH_TOKEN)
postgres_api_client = Heroku::Api::Postgres.connect_oauth(HEROKU_AUTH_TOKEN)
backups_client = postgres_api_client.backups


# Get data
$logger.info 'Fetching list of apps.'
apps = heroku_client.app.list

$logger.info 'Fetching list of databases.'
databases = Parallel.map(apps, in_threads: THREADS) do |app|
    if EXCLUDE_APPS.include? app.fetch('name')
      $logger.debug "Skipping #{app.fetch('name')} as it's in the exclude apps list."
      next nil
    end

    heroku_client.addon.list_by_app(app.fetch('id'))
                 .select { |a| a.dig('addon_service', 'name').eql?('heroku-postgresql') }
end.reject(&:nil?).flatten.uniq { |a| a['name'] }

$logger.info 'Fetching list of backups.'
backups = Hash[Parallel.map(databases, in_threads: THREADS) do |database|
  [
    database['id'],
    backups_client.list(database.fetch('app').fetch('id'))
                  .select { |backup| backup[:to_name].end_with?('BACKUP') && backup[:finished_at] && backup[:succeeded] }
  ]
end]


source = []
databases.each do |database|
  app_id = database.fetch('app').fetch('id')
  app_name = database.fetch('app').fetch('name')
  db_name = database.fetch('name')
  backups[database.fetch('id')].each do |backup|
    time = Time.parse(backup.fetch(:started_at)).getutc
    source.push [db_name, app_name, time, app_id, backup.fetch(:num)]
  end
end

$logger.info 'Downloading databases'
Parallel.each(source, in_threads: THREADS) do |db_name, app_name, time, app_id, backup_num|
  Thread.current.thread_variable_set(:logger_label, db_name)
  file_name = File.join(
    DESTINATION,
    app_name,
    "#{db_name}_#{time.strftime('%F_%T')}.dump"
  )

  FileUtils.mkdir_p(File.dirname(file_name))

  if File.exist?(file_name)
    $logger.debug 'Skipping download - destination file exists.'
    next
  end

  $logger.info "Downloading #{app_name}'s #{db_name} from " \
               "#{time.strftime('%F %T')}."
  url = URI(backups_client.url(app_id, backup_num).fetch(:url))
  $logger.debug "Downloading to #{file_name}"
  $logger.debug "Downloading from #{url}"

  downloaded = url.open
  if downloaded.is_a?(StringIO)
    IO.copy_stream(downloaded, file_name)
  else
    FileUtils.mv(downloaded.path, file_name)
  end
end


$logger.info 'Deleting removed files'
source_files = source.map { |db_name, app_name, time, _app_id, _backup_num| File.join app_name, "#{db_name}_#{time.strftime('%F_%T')}.dump" }
Dir.foreach(DESTINATION) do |destination_entry|
  next if destination_entry.eql?('.') || destination_entry.eql?('..')
  next if EXCLUDE_APPS.include?(destination_entry)
  next unless File.directory?(File.join(DESTINATION, destination_entry))

  # We now have a directory which should contain backup files
  Dir.foreach(File.join(DESTINATION, destination_entry)) do |entry|
    next if entry.eql?('.') || entry.eql?('..')
    file_name = File.join DESTINATION, destination_entry, entry
    next unless File.file? file_name

    # We now have what should be a dump file
    next if source_files.include? File.join(destination_entry, entry)

    # We now have a file which doesn't exist in source
    $logger.info "Deleting #{File.join(destination_entry, entry)}"
    File.unlink(file_name)
  end

  # Remove directory if it's empty7
  if Dir.foreach(File.join(DESTINATION, destination_entry)).count == 2
    $logger.info "Deleting empty directory #{destination_entry}"
    Dir.unlink File.join(DESTINATION, destination_entry)
  end
end

